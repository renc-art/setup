name: 'Setup Organization'
on:
  workflow_dispatch:

jobs:
  variables:
    name: 'Create organization on Terraform Cloud'
    runs-on: ubuntu-latest
    steps:
      - name: Get necessary variables
        id: repo_org
        env:
          GITHUB_TOKEN: ${{ secrets.SETUP_TOKEN }}
        run: |
          org_name=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)
          echo "Organization: $org_name"
          echo "org_name=$org_name" >> $GITHUB_ENV
          
          org_owner_username=$(curl -s --request GET \
            --url https://api.github.com/orgs/$org_name/members \
            --header "Authorization: token $GITHUB_TOKEN" \
            --header 'Content-Type: application/vnd.api+json' \
            | jq '.[] | .login' \
            | head -n 1 \
            | tr -d '"')
          
          org_owner_email=$(curl -s --request GET \
            --url https://api.github.com/users/$org_owner_username \
            --header "Authorization: token $GITHUB_TOKEN" \
            --header 'Content-Type: application/vnd.api+json' \
            | jq -r '.email')
          
          echo "Organization owner login: $org_owner_username"
          echo "Organization owner email: $org_owner_email"
          echo "org_owner_email=$org_owner_email" >> $GITHUB_ENV

  apply-terraform:
    needs:
      - variables
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.org_name }}/.github-infrastructure-to-register-with-terraform
          token: ${{ secrets.SETUP_TOKEN }}

      - name: Replace ORGANIZATION_NAME with the actual organization name
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "ORGANIZATION_NAME"
          replace: ${{ env.org_name }}
          include: "**"
          regex: false

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_PERSONAL_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          terraform apply -auto-approve -input=false

      - name: Get team_token output
        run: |
          team_token=$(terraform output -raw team_token)
          echo "::add-mask::$team_token"
          echo "team_token=$team_token" >> $GITHUB_ENV

  set-team-token:
    needs:
      - apply-terraform
    runs-on: ubuntu-latest
    steps:
      - name: Set the team token as organization secrets
        uses: gliech/create-github-secret-action@v1
        with:
          name: TF_API_TOKEN
          location: ${{ env.org_name }}
          value: ${{ env.team_token }}
          org_visibility: all
          pa_token: ${{ secrets.SETUP_TOKEN }}


  create-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Get current repository organization
        id: repo_org
        run: |
          org_name=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)
          echo "Organization: $org_name"
          echo "org_name=$org_name" >> $GITHUB_ENV

      - name: Get user information
        id: user_info
        run: |
          response=$(curl -s -H "Authorization: token ${{ secrets.SETUP_TOKEN }}" https://api.github.com/user)
          user_name=$(echo "$response" | jq -r '.name')
          user_email=$(echo "$response" | jq -r '.email')
          echo "user_name=$user_name" >> $GITHUB_ENV
          echo "user_email=$user_email" >> $GITHUB_ENV

      - name: Create a new repository from a template
        env:
          GITHUB_TOKEN: ${{ secrets.SETUP_TOKEN }}
        run: |
          curl -L -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/codingones/dotgithub/generate \
          -d '{
          "owner": "${{ env.org_name }}",
          "name": ".github-infrastructure-to-register-with-terraform",
          "description": "This is a transient repository that will deploy your .github",
          "include_all_branches": false,
          "private": false
          }'

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.org_name }}/.github-infrastructure-to-register-with-terraform
          token: ${{ secrets.SETUP_TOKEN }}


      - name: Replace ORGANIZATION_NAME with the actual organization name
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "ORGANIZATION_NAME"
          replace: ${{ env.org_name }}
          include: "**"
          regex: false

      - name: Replace USER_NAME with the actual user name
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "USER_NAME"
          replace: ${{ env.user_name }}
          include: "**"
          regex: false

      - name: Replace USER_EMAIL with the actual user email
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "USER_EMAIL"
          replace: ${{ env.user_email }}
          include: "**"
          regex: false

      - name: Commit and push changes
        run: |
          git config user.name "${{ env.user_name }}"
          git config user.email "${{ env.user_email }}"
          git add .
          git diff --quiet && git diff --staged --quiet || git commit -m "Replace ORGANIZATION_NAME, USER_NAME, USER_EMAIL with the actual values"
          git push


  remove-terraform-cloud-personal-token:
    runs-on: ubuntu-latest
    needs:
      - set-team-token
    steps:
      - name: Remove TF_CLOUD_PERSONAL_API_TOKEN from organization secrets (a personal token has too many rights on TF Cloud)
        env:
          GITHUB_TOKEN: ${{ secrets.SETUP_TOKEN }}
        run: |
          org_name=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)
          echo "Removing TF_CLOUD_PERSONAL_API_TOKEN from organization secrets..."
          curl -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/orgs/$org_name/actions/secrets/TF_CLOUD_PERSONAL_API_TOKEN"
          echo "TF_CLOUD_PERSONAL_API_TOKEN has been removed from organization secrets."

  #delete-repo:
  #  runs-on: ubuntu-latest
  #  needs:
  #    - create-repo
  #    - remove-terraform-cloud-personal-token
  #  steps:
  #    - name: Delete this repository
  #      env:
  #        GITHUB_TOKEN: ${{ secrets.SETUP_TOKEN }}
  #      run: |
  #        echo "Deleting the current repository..."
  #        curl -X DELETE \
  #          -H "Accept: application/vnd.github+json" \
  #          -H "Authorization: token $GITHUB_TOKEN" \
  #          "https://api.github.com/repos/${{ github.repository }}"
  
      
